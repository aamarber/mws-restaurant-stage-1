{"version":3,"sources":["../js/dbhelper.js"],"names":["DBHelper","domain","port","data","callback","restaurants","xhr","readyState","originalCallback","onload","fetchRestaurantsOnLoad","XMLHttpRequest","open","DATABASE_URL","send","status","JSON","parse","responseText","error","id","fetchRestaurants","restaurant","filter","r","length","cuisine","results","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","size","sizesSuffixes","marker","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n  constructor(domain, port){\r\n    // The 'cache' of the restaurants json result\r\n    this.data = '';\r\n    this.domain = domain || '127.0.0.1';\r\n    this.port = port || 8887;\r\n  }\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  get DATABASE_URL() {\r\n    return `http://${this.domain}${this.port ? `:${this.port}` : ''}/data/restaurants.json`;\r\n  }\r\n\r\n  \r\n  \r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  fetchRestaurants(callback) {\r\n    if(this.data){\r\n      callback(null, this.data.restaurants);\r\n      return;\r\n    }\r\n\r\n    //This is to avoid multiple requests for the restaurant.json\r\n    if(this.xhr && this.xhr.readyState === 1){\r\n      const originalCallback = this.xhr.onload;\r\n\r\n      /** The original onload callback is stored, I change it by a new one which calls the callback passed as an argument and the original callback\r\n       * Example\r\n       * Request 1 onload: function() { fetchRestaurantById() };\r\n       * Request 2 onload: function(){ request1Callback(); fetchRestaurantByCuisine(); }\r\n       */\r\n      this.xhr.onload = () => {\r\n        originalCallback();\r\n        this.fetchRestaurantsOnLoad(callback, this.xhr);\r\n      };\r\n      return;\r\n    }\r\n\r\n    this.xhr = new XMLHttpRequest();\r\n    this.xhr.open('GET', this.DATABASE_URL, true);\r\n    this.xhr.onload = () => {\r\n      this.fetchRestaurantsOnLoad(callback, this.xhr);\r\n    };\r\n    this.xhr.send();\r\n  }\r\n\r\n  fetchRestaurantsOnLoad(callback, xhr){\r\n    if (xhr.status === 200) { // Got a success response from server!\r\n      this.data = JSON.parse(xhr.responseText);\r\n      const restaurants = this.data.restaurants;\r\n      callback(null, restaurants);\r\n    } else { // Oops!. Got an error from server.\r\n      const error = (`Request failed. Returned status of ${xhr.status}`);\r\n      callback(error, null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    this.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.filter(r => r.id == id);\r\n        if (restaurant && restaurant.length > 0) { // Got the restaurant\r\n          callback(null, restaurant[0]);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    this.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    this.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    this.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    this.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    this.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  imageUrlForRestaurant(restaurant, size) {\r\n    var sizesSuffixes = {\r\n      'large': '1600_large',\r\n      'medium': '800_medium',\r\n      'small': '350_small',\r\n    }\r\n\r\n    return (`/img/${restaurant.id}-${sizesSuffixes[size]}.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: this.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n"]}